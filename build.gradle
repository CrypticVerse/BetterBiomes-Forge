import net.darkhax.curseforgegradle.TaskPublishCurseForge
plugins {
    id 'idea'
    id 'signing'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT' apply true
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.18'
    id 'com.github.breadmoirai.github-release' version '2.+'
    id 'com.diffplug.spotless' version '6.25.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}
spotless {
    java {
        removeUnusedImports()
        importOrder('java', 'javax', '', 'net.minecraft', 'net.minecraftforge', 'net.crypticverse')
        trimTrailingWhitespace()
    }
}
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'betterbiomes', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://raw.githubusercontent.com/CrypticVerse/projectresources/master/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))

    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-${terrablender_version}")
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description,
        terrablender_version_range: terrablender_version_range
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
java {
    withSourcesJar()
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "BetterBiomes-Forge"
            artifact jar
        }
    }
    repositories {
        maven {
            url System.getenv("MAVEN_URL").toString()
        }
    }
}
signing {
    sign publishing.publications.mavenJava
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "Qs2o8KiI"
    versionNumber = "forge-${mod_version}"
    versionName = "Better Biomes Forge ${mod_display_name}"
    versionType = "beta"
    uploadFile = jar
    gameVersions = ["1.20.1"]
    loaders = ["forge", "neoforge"]
    changelog = project.file("CHANGELOG.md").text
}
task curseforge(type: TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(938715, jar)
    mainFile.releaseType = 'beta'
    mainFile.displayName = "Better Biomes Forge ${mod_name}"
    mainFile.addGameVersion("1.20.1")
    mainFile.addModLoader("NeoForge")
    mainFile.addJavaVersion("Java 17")
    mainFile.changelog = project.file("CHANGELOG.md").text
    mainFile.changelogType = 'markdown'
    mainFile.addRequirement("terrablender")
}
githubRelease {
    owner = "CrypticVerse"
    repo = "BetterBiomes-Forge"
    tagName = "forge-${mod_name}"
    releaseName = "Better Biomes Forge ${mod_name}"
    targetCommitish = "1.20.1"
    draft = false
    releaseAssets tasks.jar
    body = project.file("CHANGELOG.md").text
    token System.getenv("GITHUB_TOKEN")
}
tasks.register("publishMods") {
    dependsOn tasks.modrinth
    dependsOn tasks.curseforge
    dependsOn tasks.githubRelease

}